# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gippylib', [dirname(__file__)])
        except ImportError:
            import _gippylib
            return _gippylib
        if fp is not None:
            try:
                _mod = imp.load_module('_gippylib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gippylib = swig_import_helper()
    del swig_import_helper
else:
    import _gippylib
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gippylib.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _gippylib.SwigPyIterator_value(self)
    def incr(self, n = 1): return _gippylib.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _gippylib.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _gippylib.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _gippylib.SwigPyIterator_equal(self, *args)
    def copy(self): return _gippylib.SwigPyIterator_copy(self)
    def next(self): return _gippylib.SwigPyIterator_next(self)
    def __next__(self): return _gippylib.SwigPyIterator___next__(self)
    def previous(self): return _gippylib.SwigPyIterator_previous(self)
    def advance(self, *args): return _gippylib.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _gippylib.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _gippylib.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _gippylib.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _gippylib.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _gippylib.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _gippylib.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _gippylib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr
    def iterator(self): return _gippylib.vectors_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _gippylib.vectors___nonzero__(self)
    def __bool__(self): return _gippylib.vectors___bool__(self)
    def __len__(self): return _gippylib.vectors___len__(self)
    def pop(self): return _gippylib.vectors_pop(self)
    def __getslice__(self, *args): return _gippylib.vectors___getslice__(self, *args)
    def __setslice__(self, *args): return _gippylib.vectors___setslice__(self, *args)
    def __delslice__(self, *args): return _gippylib.vectors___delslice__(self, *args)
    def __delitem__(self, *args): return _gippylib.vectors___delitem__(self, *args)
    def __getitem__(self, *args): return _gippylib.vectors___getitem__(self, *args)
    def __setitem__(self, *args): return _gippylib.vectors___setitem__(self, *args)
    def append(self, *args): return _gippylib.vectors_append(self, *args)
    def empty(self): return _gippylib.vectors_empty(self)
    def size(self): return _gippylib.vectors_size(self)
    def clear(self): return _gippylib.vectors_clear(self)
    def swap(self, *args): return _gippylib.vectors_swap(self, *args)
    def get_allocator(self): return _gippylib.vectors_get_allocator(self)
    def begin(self): return _gippylib.vectors_begin(self)
    def end(self): return _gippylib.vectors_end(self)
    def rbegin(self): return _gippylib.vectors_rbegin(self)
    def rend(self): return _gippylib.vectors_rend(self)
    def pop_back(self): return _gippylib.vectors_pop_back(self)
    def erase(self, *args): return _gippylib.vectors_erase(self, *args)
    def __init__(self, *args): 
        this = _gippylib.new_vectors(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _gippylib.vectors_push_back(self, *args)
    def front(self): return _gippylib.vectors_front(self)
    def back(self): return _gippylib.vectors_back(self)
    def assign(self, *args): return _gippylib.vectors_assign(self, *args)
    def resize(self, *args): return _gippylib.vectors_resize(self, *args)
    def insert(self, *args): return _gippylib.vectors_insert(self, *args)
    def reserve(self, *args): return _gippylib.vectors_reserve(self, *args)
    def capacity(self): return _gippylib.vectors_capacity(self)
    __swig_destroy__ = _gippylib.delete_vectors
    __del__ = lambda self : None;
vectors_swigregister = _gippylib.vectors_swigregister
vectors_swigregister(vectors)

class GeoData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gippylib.new_GeoData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gippylib.delete_GeoData
    __del__ = lambda self : None;
    def Filename(self): return _gippylib.GeoData_Filename(self)
    def Basename(self): return _gippylib.GeoData_Basename(self)
    def Format(self): return _gippylib.GeoData_Format(self)
    def Product(self): return _gippylib.GeoData_Product(self)
    def GetGDALDataset(self): return _gippylib.GeoData_GetGDALDataset(self)
    def XSize(self): return _gippylib.GeoData_XSize(self)
    def YSize(self): return _gippylib.GeoData_YSize(self)
    def Size(self): return _gippylib.GeoData_Size(self)
    def GeoLoc(self, *args): return _gippylib.GeoData_GeoLoc(self, *args)
    def TopLeft(self): return _gippylib.GeoData_TopLeft(self)
    def LowerRight(self): return _gippylib.GeoData_LowerRight(self)
    def GetMeta(self, *args): return _gippylib.GeoData_GetMeta(self, *args)
    def SetMeta(self, *args): return _gippylib.GeoData_SetMeta(self, *args)
    def GetMetaGroup(self, *args): return _gippylib.GeoData_GetMetaGroup(self, *args)
    def CopyMeta(self, *args): return _gippylib.GeoData_CopyMeta(self, *args)
    def CopyCoordinateSystem(self, *args): return _gippylib.GeoData_CopyCoordinateSystem(self, *args)
    def Chunk(self, overlap = 0, bytes = 2): return _gippylib.GeoData_Chunk(self, overlap, bytes)
    def AddOverviews(self): return _gippylib.GeoData_AddOverviews(self)
    def Flush(self): return _gippylib.GeoData_Flush(self)
GeoData_swigregister = _gippylib.GeoData_swigregister
GeoData_swigregister(GeoData)

class GeoFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeoFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gippylib.new_GeoFunction(*args)
        try: self.this.append(this)
        except: self.this = this
    def Function(self): return _gippylib.GeoFunction_Function(self)
    def Operand(self): return _gippylib.GeoFunction_Operand(self)
    __swig_destroy__ = _gippylib.delete_GeoFunction
    __del__ = lambda self : None;
GeoFunction_swigregister = _gippylib.GeoFunction_swigregister
GeoFunction_swigregister(GeoFunction)

class GeoRaster(GeoData):
    __swig_setmethods__ = {}
    for _s in [GeoData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoRaster, name, value)
    __swig_getmethods__ = {}
    for _s in [GeoData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeoRaster, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gippylib.new_GeoRaster(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gippylib.delete_GeoRaster
    __del__ = lambda self : None;
    def Copy(self, *args): return _gippylib.GeoRaster_Copy(self, *args)
    def AddFunction(self, *args): return _gippylib.GeoRaster_AddFunction(self, *args)
    def XSize(self): return _gippylib.GeoRaster_XSize(self)
    def YSize(self): return _gippylib.GeoRaster_YSize(self)
    def ValidSize(self): return _gippylib.GeoRaster_ValidSize(self)
    def DataTypeStr(self): return _gippylib.GeoRaster_DataTypeStr(self)
    def DataType(self): return _gippylib.GeoRaster_DataType(self)
    def GetGDALRasterBand(self): return _gippylib.GeoRaster_GetGDALRasterBand(self)
    def Info(self, stats = False): return _gippylib.GeoRaster_Info(self, stats)
    def Description(self): return _gippylib.GeoRaster_Description(self)
    def SetDescription(self, *args): return _gippylib.GeoRaster_SetDescription(self, *args)
    def SetColor(self, *args): return _gippylib.GeoRaster_SetColor(self, *args)
    def CopyCategoryNames(self, *args): return _gippylib.GeoRaster_CopyCategoryNames(self, *args)
    def Units(self): return _gippylib.GeoRaster_Units(self)
    def SetUnits(self, *args): return _gippylib.GeoRaster_SetUnits(self, *args)
    def Gain(self): return _gippylib.GeoRaster_Gain(self)
    def Offset(self): return _gippylib.GeoRaster_Offset(self)
    def SetGain(self, *args): return _gippylib.GeoRaster_SetGain(self, *args)
    def SetOffset(self, *args): return _gippylib.GeoRaster_SetOffset(self, *args)
    def Thermal(self): return _gippylib.GeoRaster_Thermal(self)
    def SetThermal(self, k1 = 0, k2 = 0): return _gippylib.GeoRaster_SetThermal(self, k1, k2)
    def SetDynamicRange(self, *args): return _gippylib.GeoRaster_SetDynamicRange(self, *args)
    def SetEsun(self, *args): return _gippylib.GeoRaster_SetEsun(self, *args)
    def Atmosphere(self): return _gippylib.GeoRaster_Atmosphere(self)
    def SetAtmosphere(self, *args): return _gippylib.GeoRaster_SetAtmosphere(self, *args)
    def ClearAtmosphere(self): return _gippylib.GeoRaster_ClearAtmosphere(self)
    def NoData(self): return _gippylib.GeoRaster_NoData(self)
    def NoDataValue(self): return _gippylib.GeoRaster_NoDataValue(self)
    def SetNoData(self, *args): return _gippylib.GeoRaster_SetNoData(self, *args)
    def ClearNoData(self): return _gippylib.GeoRaster_ClearNoData(self)
    def MaxValue(self): return _gippylib.GeoRaster_MaxValue(self)
    def MinValue(self): return _gippylib.GeoRaster_MinValue(self)
    def AddMask(self, *args): return _gippylib.GeoRaster_AddMask(self, *args)
    def Min(self): return _gippylib.GeoRaster_Min(self)
    def Max(self): return _gippylib.GeoRaster_Max(self)
    def Mean(self): return _gippylib.GeoRaster_Mean(self)
    def StdDev(self): return _gippylib.GeoRaster_StdDev(self)
    def GetGDALStats(self): return _gippylib.GeoRaster_GetGDALStats(self)
    def ComputeGDALStats(self): return _gippylib.GeoRaster_ComputeGDALStats(self)
    def ComputeStats(self, RAW = False): return _gippylib.GeoRaster_ComputeStats(self, RAW)
    def __gt__(self, *args): return _gippylib.GeoRaster___gt__(self, *args)
    def __ge__(self, *args): return _gippylib.GeoRaster___ge__(self, *args)
    def __lt__(self, *args): return _gippylib.GeoRaster___lt__(self, *args)
    def __le__(self, *args): return _gippylib.GeoRaster___le__(self, *args)
    def __add__(self, *args): return _gippylib.GeoRaster___add__(self, *args)
    def __sub__(self, *args): return _gippylib.GeoRaster___sub__(self, *args)
GeoRaster_swigregister = _gippylib.GeoRaster_swigregister
GeoRaster_swigregister(GeoRaster)

class GeoImage(GeoData):
    __swig_setmethods__ = {}
    for _s in [GeoData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeoImage, name, value)
    __swig_getmethods__ = {}
    for _s in [GeoData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeoImage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gippylib.new_GeoImage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gippylib.delete_GeoImage
    __del__ = lambda self : None;
    def NumBands(self): return _gippylib.GeoImage_NumBands(self)
    def DataType(self): return _gippylib.GeoImage_DataType(self)
    def Info(self, arg0 = True, arg1 = False): return _gippylib.GeoImage_Info(self, arg0, arg1)
    def BandNames(self): return _gippylib.GeoImage_BandNames(self)
    def GetColors(self): return _gippylib.GeoImage_GetColors(self)
    def SetColor(self, *args): return _gippylib.GeoImage_SetColor(self, *args)
    def SetColors(self, *args): return _gippylib.GeoImage_SetColors(self, *args)
    def CopyColorTable(self, *args): return _gippylib.GeoImage_CopyColorTable(self, *args)
    def AddBand(self, *args): return _gippylib.GeoImage_AddBand(self, *args)
    def RemoveBand(self, *args): return _gippylib.GeoImage_RemoveBand(self, *args)
    def PruneBands(self, *args): return _gippylib.GeoImage_PruneBands(self, *args)
    def PruneToRGB(self): return _gippylib.GeoImage_PruneToRGB(self)
    def AddMask(self, *args): return _gippylib.GeoImage_AddMask(self, *args)
    def ComputeStats(self): return _gippylib.GeoImage_ComputeStats(self)
    def SetGain(self, *args): return _gippylib.GeoImage_SetGain(self, *args)
    def SetOffset(self, *args): return _gippylib.GeoImage_SetOffset(self, *args)
    def SetUnits(self, *args): return _gippylib.GeoImage_SetUnits(self, *args)
    def ClearAtmosphere(self): return _gippylib.GeoImage_ClearAtmosphere(self)
    def SetNoData(self, *args): return _gippylib.GeoImage_SetNoData(self, *args)
    def ClearNoData(self): return _gippylib.GeoImage_ClearNoData(self)
GeoImage_swigregister = _gippylib.GeoImage_swigregister
GeoImage_swigregister(GeoImage)

# This file is compatible with both classic and new-style classes.



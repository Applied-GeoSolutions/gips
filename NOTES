
# pile of useful commands; from https://docs.docker.com/get-started/part2/#recap-and-cheat-sheet-optional
docker build -t friendlyname .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyname  # Run "friendlyname" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyname         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry


Services - https://docs.docker.com/get-started/part3/#introduction
========
A service only runs one image, but it codifies the way that image runsâ€”what
ports it should use, how many replicas of the container should run so the
service has the capacity it needs, and so on. Scaling a service changes the
number of container instances running that piece of software, assigning more
computing resources to the service in the process.

demo docker-compose.yml:
	version: "3"
	services:
	  web:
		# replace username/repo:tag with your name and image details
		image: username/repo:tag
		deploy:
		  replicas: 5
		  resources:
			limits:
			  cpus: "0.1"
			  memory: 50M
		  restart_policy:
			condition: on-failure
		ports:
		  - "80:80"
		networks:
		  - webnet
	networks:
	  # name a network called 'webnet'
	  # defaults to a "load-balanced overlay network"
	  webnet:

